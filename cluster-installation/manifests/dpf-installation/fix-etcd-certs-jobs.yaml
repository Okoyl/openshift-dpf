# Source: dpf-operator/charts/kamaji-etcd/templates/etcd_job_preinstall_1.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.9.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: dpf-operator
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
  name: "dpf-operator-etcd-setup-1"
  namespace: dpf-operator-system
spec:
  template:
    metadata:
      name: "dpf-operator"
    spec:
      serviceAccountName: dpf-operator-kamaji-etcd
      restartPolicy: Never
      initContainers:
        - name: cfssl
          image: cfssl/cfssl:latest
          command:
            - bash
            - -c
            - |-
              cfssl gencert -initca /csr/ca-csr.json | cfssljson -bare /certs/ca &&
              mv /certs/ca.pem /certs/ca.crt && mv /certs/ca-key.pem /certs/ca.key &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=peer-authentication /csr/peer-csr.json | cfssljson -bare /certs/peer &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=peer-authentication /csr/server-csr.json | cfssljson -bare /certs/server &&
              cfssl gencert -ca=/certs/ca.crt -ca-key=/certs/ca.key -config=/csr/config.json -profile=client-authentication /csr/root-client-csr.json | cfssljson -bare /certs/root-client
          volumeMounts:
            - mountPath: /certs
              name: certs
            - mountPath: /csr
              name: csr
      containers:
        - name: kubectl
          image: clastix/kubectl:v1.30
          command: ["/bin/sh", "-c"]
          args:
            - |
              if kubectl get secret dpf-operator-kamaji-etcd-certs --namespace=dpf-operator-system &>/dev/null; then
                echo "Secret dpf-operator-kamaji-etcd-certs already exists"
              else
                echo "Creating secret dpf-operator-kamaji-etcd-certs"
                kubectl --namespace=dpf-operator-system create secret generic dpf-operator-kamaji-etcd-certs --from-file=/certs/ca.crt --from-file=/certs/ca.key --from-file=/certs/peer-key.pem --from-file=/certs/peer.pem --from-file=/certs/server-key.pem --from-file=/certs/server.pem
              fi
              if kubectl get secret dpf-operator-kamaji-etcd-root-client-certs --namespace=dpf-operator-system &>/dev/null; then
                echo "Secret dpf-operator-kamaji-etcd-root-client-certs already exists"
              else
                echo "Creating secret dpf-operator-kamaji-etcd-root-client-certs"
                kubectl --namespace=dpf-operator-system create secret tls dpf-operator-kamaji-etcd-root-client-certs --key=/certs/root-client-key.pem --cert=/certs/root-client.pem
              fi
          volumeMounts:
            - mountPath: /certs
              name: certs
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
      volumes:
        - name: csr
          configMap:
            name: dpf-operator-kamaji-etcd-csr
        - name: certs
          emptyDir: {}
---
# Source: dpf-operator/charts/kamaji-etcd/templates/etcd_job_preinstall_2.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    helm.sh/chart: kamaji-etcd-0.9.0
    app.kubernetes.io/name: kamaji-etcd
    app.kubernetes.io/instance: dpf-operator
    app.kubernetes.io/version: "3.5.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
  name: "dpf-operator-etcd-setup-2"
  namespace: dpf-operator-system
spec:
  backoffLimit: 12
  template:
    metadata:
      name: "dpf-operator"
    spec:
      serviceAccountName: dpf-operator-kamaji-etcd
      restartPolicy: Never
      initContainers:
        - name: kubectl
          image: clastix/kubectl:v1.30
          command:
          - sh
          - -c
          - kubectl --namespace=dpf-operator-system rollout status sts/dpf-operator-kamaji-etcd --timeout=300s
      containers:
        - command:
          - bash
          - -c
          - |-
            etcdctl member list -w table
            if etcdctl user get root &>/dev/null; then
              echo "User already exists, nothing to do"
            else
              etcdctl user add --no-password=true root &&
              etcdctl role add root &&
              etcdctl user grant-role root root &&
              etcdctl auth enable
            fi
          env:
            - name: ETCDCTL_ENDPOINTS
              value: https://dpf-operator-kamaji-etcd-0.dpf-operator-kamaji-etcd.dpf-operator-system.svc.cluster.local:2379
            - name: ETCDCTL_CACERT
              value: /opt/certs/ca/ca.crt
            - name: ETCDCTL_CERT
              value: /opt/certs/root-certs/tls.crt
            - name: ETCDCTL_KEY
              value: /opt/certs/root-certs/tls.key
          image: quay.io/coreos/etcd:v3.5.6
          imagePullPolicy: IfNotPresent
          name: etcd-client
          volumeMounts:
            - name: root-certs
              mountPath: /opt/certs/root-certs
            - name: ca
              mountPath: /opt/certs/ca
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
      volumes:
        - name: root-certs
          secret:
            secretName: dpf-operator-kamaji-etcd-root-client-certs
        - name: ca
          secret:
            secretName: dpf-operator-kamaji-etcd-certs